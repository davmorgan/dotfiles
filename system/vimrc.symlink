set nocompatible
set background=dark

" The next three lines ensure that vundle works
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Load Vundle First (REQUIRED!)
Bundle 'gmarik/vundle'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'

" Load Colorschemes
Bundle 'altercation/vim-colors-solarized'
Bundle 'desert-warm-256'

" Enable Ack Support
if executable('ag')
  Bundle 'mileszs/ack.vim'
  let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
elseif executable('ack-grep')
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
  Bundle 'mileszs/ack.vim'
elseif executable('ack')
  Bundle 'mileszs/ack.vim'
endif

" Key Bundles
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'godlygeek/tabular'
Bundle 'scrooloose/syntastic'

" Snippets
Bundle 'honza/vim-snippets'
Bundle 'garbas/vim-snipmate'
if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
  source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
endif

" Other Awesome Bundles
Bundle 'kien/ctrlp.vim'
Bundle 'mhinz/vim-signify'
Bundle 'tpope/vim-fugitive'
Bundle 'bling/vim-airline'
Bundle 'bling/vim-bufferline'
if executable('ctags')
  Bundle 'majutsushi/tagbar'
endif

" Asciidoc Support
Bundle 'dagwieers/asciidoc-vim'

" Puppet Support
Bundle 'rodjek/vim-puppet'

" PowerShell Support
Bundle 'PProvost/vim-ps1'

" Markdown Support
Bundle 'tpope/vim-markdown'

" Rails Support
Bundle 'tpope/vim-rails'
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

" Searching Support
Bundle 'rking/ag.vim'
let g:ackprg = 'ag --nogroup --nocolor --column'

" Required for Proper Function
filetype plugin indent on

" Initial Configuration
syntax on
set t_Co=256
set autoread
set mouse=a
set mousehide
set history=1000

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable

if has('gui_running')
    set background=light
else
    set background=dark
endif

if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
  let g:solarized_termcolors=256
  colorscheme solarized
endif

" GUI options that need to be set here first
" Remove exta, useless button bar.
set guioptions-=T
set guioptions+=t

" Encording Setup
set encoding=utf8
set ffs=unix,dos,mac

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

let mapleader = ","
nmap <leader>v :tabedit $MYVIMRC<CR>

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","
nnoremap ; :

" Use Ag for Searching
let g:ackprg = 'ag --nogroup --nocolor --column'

" Fast saving
nmap <leader>w :w!<cr>

" Resave with sudo
cmap w!! w !sudo tee % >/dev/null

" Tab config
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Indent Config
set autoindent
set smartindent
set copyindent

" Editor Configs
set hidden
set nowrap
set number
set shiftround
set showmatch
set ruler

" Whitespace Config
set backspace=eol,start,indent

set so=7
set wildmode=longest:full
set wildignore=*.o,*~,*.pyc,*.DS_Store
set wildmenu
set lazyredraw
set magic
set title

" Search Configuration
set ignorecase
set smartcase
set hlsearch
set incsearch

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set cursorline

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
if has('statusline')
  set laststatus=2

  " Broken down into easily includeable segments
  set statusline=%<%f\                     " Filename
  set statusline+=%w%h%m%r                 " Options
  set statusline+=%{fugitive#statusline()} " Git Hotness
  set statusline+=\ [%{&ff}/%Y]            " Filetype
  set statusline+=\ [%{getcwd()}]          " Current dir
  set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

" Toggle Vexplore with Ctrl-E
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      let t:expl_buf_num = bufnr("%")
  endif
endfunction
map <silent> <C-E> :call ToggleVExplorer()<CR>

" Change directory to the current buffer when opening files.
set autochdir

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
autocmd BufWrite *.pp :call DeleteTrailingWS()
